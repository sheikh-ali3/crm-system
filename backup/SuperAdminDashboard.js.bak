import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './SuperAdminDashboard.css';
import SuperAdminSidebar from '../Components/Layout/SuperAdminSidebar';
import ThemeToggle from '../Components/UI/ThemeToggle';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';
const BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:3000';

const SuperAdminDashboard = () => {
  const navigate = useNavigate();
  const [admins, setAdmins] = useState([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [openEditDialog, setOpenEditDialog] = useState(false);
  const [openProductDialog, setOpenProductDialog] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [profile, setProfile] = useState({
    fullName: '',
    phone: '',
    department: '',
    joinDate: new Date().toISOString().split('T')[0]
  });
  const [permissions, setPermissions] = useState({
    crmAccess: false
  });
  const [alert, setAlert] = useState({ show: false, message: '', type: 'success' });
  const [activeTab, setActiveTab] = useState('dashboard');
  const [selectedAdmin, setSelectedAdmin] = useState(null);
  const [crmOverview, setCrmOverview] = useState([]);
  const [newProduct, setNewProduct] = useState({ id: '', name: '', description: '', icon: 'ðŸ“‹' });
  const [products, setProducts] = useState([
    { id: 'crm', name: 'CRM System', description: 'Customer Relationship Management', icon: 'ðŸ“Š' },
    { id: 'inventory', name: 'Inventory Management', description: 'Track and manage inventory', icon: 'ðŸ“¦' },
    { id: 'billing', name: 'Billing System', description: 'Invoice and payment processing', icon: 'ðŸ’°' },
    { id: 'analytics', name: 'Advanced Analytics', description: 'Business intelligence tools', icon: 'ðŸ“ˆ' }
  ]);
  const [stats, setStats] = useState({ totalAdmins: 0, activeAdmins: 0, totalCustomers: 0, totalDeals: 0 });
  const [enterprises, setEnterprises] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const [formErrors, setFormErrors] = useState({});
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    subdomain: '',
    profile: {
      fullName: '',
      phone: '',
      department: '',
      companyName: '',
      joinDate: new Date().toISOString().split('T')[0]
    },
    permissions: {
      crmAccess: false,
      hrmsAccess: false,
      jobPortalAccess: false,
      jobBoardAccess: false,
      projectManagementAccess: false
    }
  });

  const showAlert = useCallback((message, type = 'success') => {
    setAlert({ show: true, message, type });
    setTimeout(() => {
      setAlert({ show: false, message: '', type: 'success' });
    }, 5000);
  }, []);

  const checkAuth = useCallback(async () => {
    const token = localStorage.getItem('token');
    if (!token) {
      showAlert('No authentication token found. Please login again.', 'error');
      navigate('/superadmin/login');
      return false;
    }
    try {
      await axios.get(`${API_URL}/superadmin`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      return true;
    } catch (error) {
      showAlert('Authentication failed. Please login again.', 'error');
      navigate('/superadmin/login');
      return false;
    }
  }, [navigate, showAlert]);

  const fetchEnterprises = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No token found');
      }
      
      const response = await axios.get(`${API_URL}/superadmin/admins`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      console.log('Fetched enterprises:', response.data);
      setAdmins(response.data);
    } catch (error) {
      console.error('Error fetching enterprises:', error);
      showAlert('Failed to fetch enterprises: ' + (error.response?.data?.message || error.message), 'error');
      if (error.response?.status === 403) {
        navigate('/superadmin/login');
      }
    }
  }, [navigate, showAlert]);

  const fetchCrmOverview = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No token found');
      }
      
      const response = await axios.get(`${API_URL}/superadmin/crm/overview`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      console.log('Fetched CRM overview:', response.data);
      setCrmOverview(response.data);
    } catch (error) {
      console.error('Error fetching CRM overview:', error);
      showAlert('Failed to fetch CRM overview: ' + (error.response?.data?.message || error.message), 'error');
    }
  }, [showAlert]);

  const fetchProducts = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        showAlert('No authentication token found. Please login again.', 'error');
        navigate('/superadmin/login');
        return;
      }

      const response = await axios.get(
        `${API_URL}/api/products`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (response.data && response.data.length > 0) {
        const mappedProducts = response.data.map(product => ({
          id: product.productId,
          name: product.name,
          description: product.description,
          icon: product.icon || 'ðŸ“‹',
          _id: product._id,
          accessLink: product.accessLink,
          accessUrl: `${window.location.origin}/products/access/${product.accessLink}`
        }));
        setProducts(mappedProducts);
      }
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  }, [navigate, showAlert]);

  useEffect(() => {
    const init = async () => {
      const isAuthenticated = await checkAuth();
      if (isAuthenticated) {
        fetchEnterprises();
        fetchCrmOverview();
        fetchProducts();
      }
    };
    init();
  }, [checkAuth, fetchEnterprises, fetchCrmOverview, fetchProducts]);

  const validateForm = () => {
    const errors = {};
    
    // Validate required fields
    if (!formData.email) {
      errors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'Email is invalid';
    }
    
    if (!formData.password) {
      errors.password = 'Password is required for new admin';
    } else if (formData.password.length < 6) {
      errors.password = 'Password must be at least 6 characters';
    }
    
    if (!formData.subdomain) {
      errors.subdomain = 'Subdomain is required';
    } else if (!/^[a-z0-9-]+$/.test(formData.subdomain)) {
      errors.subdomain = 'Subdomain can only contain lowercase letters, numbers, and hyphens';
    }
    
    if (!formData.profile.companyName) {
      errors.companyName = 'Company name is required';
    }
    
    // Update form errors state
    setFormErrors(errors);
    
    // Log validation results
    if (Object.keys(errors).length > 0) {
      console.log('Form validation failed:', errors);
    } else {
      console.log('Form validation passed');
    }
    
    // Form is valid if there are no errors
    return Object.keys(errors).length === 0;
  };

  const handleCreateAdmin = async (e) => {
    e.preventDefault();
    console.log('Create button clicked, validating form...');
    
    if (!validateForm()) {
      console.log('Form validation failed, not submitting');
      showAlert('Please fix the errors in the form', 'error');
      return;
    }
    
    try {
      console.log('Submitting form data:', formData);
      
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('No token found');
        showAlert('Authentication token missing. Please log in again.', 'error');
        navigate('/superadmin/login');
        return;
      }

      // Create the admin with all the form data
      const response = await axios.post(
        `${API_URL}/superadmin/create-admin`,
        formData,
        { 
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          } 
        }
      );

      console.log('Admin created successfully:', response.data);
      
      // Generate login link
      let loginUrl;
      if (response.data.loginLink) {
        loginUrl = response.data.loginLink;
      } else if (formData.subdomain) {
        loginUrl = `http://${formData.subdomain}.localhost:3000`;
      } else if (response.data.admin && response.data.admin.id) {
        loginUrl = `${BASE_URL}/admin/login?id=${response.data.admin.id}`;
      } else {
        loginUrl = `${BASE_URL}/admin/login`;
      }
      
      console.log('Login link generated:', loginUrl);
      showAlert(`Admin created successfully. Login link: ${loginUrl}`, 'success');
      
      setOpenDialog(false);
      resetForm();
      fetchEnterprises();
    } catch (error) {
      console.error('Error creating admin:', error);
      const errorMessage = error.response?.data?.message || 
                         error.message || 
                           'Failed to create admin';
      console.error('Error details:', errorMessage);
      showAlert(errorMessage, 'error');
    }
  };

  const handleUpdateEnterprise = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        showAlert('No authentication token found. Please login again.', 'error');
        navigate('/superadmin/login');
        return;
      }

      const response = await axios.put(
        `${API_URL}/superadmin/admins/${selectedAdmin._id}`,
        {
          email,
          password: password || undefined,
          profile,
          permissions: {
            crmAccess: permissions.crmAccess
          }
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );

      if (response.data.admin) {
        showAlert('Enterprise updated successfully', 'success');
        setOpenEditDialog(false);
        resetForm();
        fetchEnterprises();
      } else {
        throw new Error('Failed to update enterprise');
      }
    } catch (error) {
      console.error('Update enterprise error:', error);
      showAlert(error.response?.data?.message || 'Failed to update enterprise', 'error');
    }
  };

  const handleToggleProductAccess = async (adminId, productId, currentState) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        showAlert('No authentication token found. Please login again.', 'error');
        navigate('/superadmin/login');
        return;
      }

      if (productId !== 'crm') {
        showAlert(`${productId} access management is not yet implemented`, 'info');
        return;
      }

      const actionType = currentState ? 'revoke' : 'grant';
      console.log(`Attempting to ${actionType} ${productId} access for enterprise ID: ${adminId}`);

      if (currentState && !window.confirm(`Are you sure you want to revoke ${productId.toUpperCase()} access for this enterprise? They will no longer be able to access any ${productId.toUpperCase()} functionality.`)) {
        return;
      }

      const permissionsUpdate = {
        permissions: {
          crmAccess: !currentState
        }
      };

      const response = await axios.put(
        `${API_URL}/superadmin/admins/${adminId}`,
        permissionsUpdate,
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );

      if (response.data.admin) {
        setAdmins(prevAdmins => 
          prevAdmins.map(admin => 
            admin._id === adminId 
              ? { 
                  ...admin, 
                  permissions: { 
                    ...admin.permissions, 
                    crmAccess: !currentState 
                  } 
                }
              : admin
          )
        );
        
        if (crmOverview && crmOverview.length > 0) {
          setCrmOverview(prevOverview => 
            prevOverview.map(data => 
              data.admin.id === adminId 
                ? { 
                    ...data, 
                    admin: { 
                      ...data.admin, 
                      permissions: { 
                        ...data.admin.permissions, 
                        crmAccess: !currentState 
                      } 
                    } 
                  }
                : data
            )
          );
        }
        
        showAlert(`${productId.toUpperCase()} access ${!currentState ? 'granted' : 'revoked'} successfully`, 'success');
        console.log(`Successfully ${actionType}ed ${productId} access for enterprise ID: ${adminId}`);
        
        fetchEnterprises();
        if (activeTab === 'products') {
          fetchCrmOverview();
        }
      } else {
        throw new Error('Failed to update enterprise permissions - invalid response');
      }
    } catch (error) {
      console.error('Error toggling product access:', error);
      showAlert(error.response?.data?.message || 'Failed to update product access', 'error');
    }
  };

  const handleDeleteEnterprise = async (adminId) => {
    if (window.confirm('Are you sure you want to delete this enterprise?')) {
      try {
        const token = localStorage.getItem('token');
        await axios.delete(`${API_URL}/superadmin/admins/${adminId}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        showAlert('Enterprise deleted successfully', 'success');
        fetchEnterprises();
      } catch (error) {
        showAlert(error.response?.data?.message || 'Failed to delete enterprise', 'error');
      }
    }
  };

  const handleGrantCrmAccess = async (adminId) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        showAlert('No authentication token found. Please login again.', 'error');
        navigate('/superadmin/login');
        return;
      }

      const response = await axios.put(
        `${API_URL}/superadmin/admins/${adminId}`,
        {
          permissions: {
            crmAccess: true
          }
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );

      if (response.data.admin) {
        setAdmins(admins.map(admin => 
          admin.id === adminId ? { ...admin, permissions: response.data.admin.permissions } : admin
        ));
        
        showAlert('CRM access granted successfully', 'success');
      } else {
        throw new Error('Failed to update enterprise permissions');
      }
    } catch (error) {
      console.error('Error granting CRM access:', error);
      showAlert(error.response?.data?.message || 'Failed to grant CRM access', 'error');
    }
  };

  const resetForm = () => {
    setFormData({
      email: '',
      password: '',
      subdomain: '',
      profile: {
        fullName: '',
        phone: '',
        department: '',
        companyName: '',
        joinDate: new Date().toISOString().split('T')[0]
      },
      permissions: {
        crmAccess: false,
        hrmsAccess: false,
        jobPortalAccess: false,
        jobBoardAccess: false,
        projectManagementAccess: false
      }
    });
    setSelectedAdmin(null);
    setFormErrors({});
    
    // Also reset the old state variables for backwards compatibility
    setEmail('');
    setPassword('');
    setProfile({
      fullName: '',
      phone: '',
      department: '',
      joinDate: new Date().toISOString().split('T')[0]
    });
    setPermissions({
      crmAccess: false
    });
  };

  const handleEditClick = (admin) => {
    setSelectedAdmin(admin);
    
    // Also set the old state variables for backwards compatibility
    setEmail(admin.email);
    setProfile(admin.profile || {});
    setPermissions(admin.permissions || { crmAccess: false });
    
    setOpenEditDialog(true);
  };

  const resetProductForm = () => {
    setNewProduct({ id: '', name: '', description: '', icon: 'ðŸ“‹' });
  };

  const handleAddProduct = async (e) => {
    e.preventDefault();
    
    // Validate product ID is unique
    if (products.some(product => product.id === newProduct.id)) {
      showAlert('A product with this ID already exists', 'error');
      return;
    }
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No authentication token found');
      }
      
      // Create the product on the backend
      const response = await axios.post(
        `${API_URL}/api/products`,
        {
          productId: newProduct.id,
          name: newProduct.name,
          description: newProduct.description,
          icon: newProduct.icon
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      // Get the access URL from the response
      const { product, accessUrl } = response.data;
      
      // Add the new product to the local state with the access link
      const newProductWithAccess = {
        ...newProduct,
        _id: product._id,
        accessLink: product.accessLink,
        accessUrl: accessUrl
      };
      
      setProducts([...products, newProductWithAccess]);
      
      showAlert(`Product "${newProduct.name}" added successfully. Access link created.`, 'success');
      setOpenProductDialog(false);
      resetProductForm();
      
    } catch (error) {
      console.error('Error creating product:', error);
      showAlert(`Failed to create product: ${error.response?.data?.message || error.message}`, 'error');
    }
  };

  const handleToggleCrmAccess = async (adminId, currentAccess) => {
    try {
      const token = localStorage.getItem('token');
      const newAccessValue = !currentAccess;
      
      const response = await axios.put(
        `${API_URL}/superadmin/admins/${adminId}/toggle-crm-access`,
        { crmAccess: newAccessValue },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      if (response.data.success) {
        // Update the local state
        setAdmins(admins.map(admin => 
          admin._id === adminId 
            ? { ...admin, permissions: { ...admin.permissions, crmAccess: newAccessValue } } 
            : admin
        ));
        
        showAlert(`CRM access ${newAccessValue ? 'granted' : 'revoked'} successfully`, 'success');
      } else {
        throw new Error('Failed to update access');
      }
    } catch (error) {
      console.error('Error toggling CRM access:', error);
      showAlert('Failed to update CRM access', 'error');
    }
  };

  // Handle sidebar navigation
  const handleSidebarNavigation = (itemId) => {
    setActiveTab(itemId);
  };

  // Render the main content based on the active tab
  const renderMainContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return renderDashboardContent();
      case 'products':
        return renderProductsContent();
      case 'services':
        return renderServicesContent();
      case 'enterprise':
        return renderEnterpriseContent();
      case 'quotations':
        return renderQuotationsContent();
      case 'invoices':
        return renderInvoicesContent();
      case 'reports':
        return renderReportsContent();
      case 'expenses':
        return renderExpensesContent();
      case 'receipts':
        return renderReceiptsContent();
      case 'complaints':
        return renderComplaintsContent();
      default:
        return renderDashboardContent();
    }
  };

  // Dashboard content
  const renderDashboardContent = () => {
    return (
      <div className="dashboard-overview">
        <h2>Dashboard Overview</h2>
        <div className="dashboard-stats">
          <div className="stat-card">
            <h3>Total Enterprises</h3>
            <span className="stat-number">{admins.length}</span>
          </div>
          <div className="stat-card">
            <h3>Active Enterprises</h3>
            <span className="stat-number">{admins.filter(admin => admin.profile?.status === 'active').length}</span>
          </div>
          <div className="stat-card">
            <h3>Total Customers</h3>
            <span className="stat-number">{stats.totalCustomers || 0}</span>
          </div>
          <div className="stat-card">
            <h3>Products</h3>
            <span className="stat-number">{products.length}</span>
          </div>
        </div>
      </div>
    );
  };

  // Products content
  const renderProductsContent = () => {
    return (
      <div className="products-section">
        <div className="section-header">
          <h2>Products Management</h2>
          <button className="create-btn" onClick={() => setOpenProductDialog(true)}>
            Add New Product
          </button>
        </div>
        <div className="products-list">
          {products.map(product => (
            <div key={product.id} className="product-card">
              <div className="product-header">
                <div className="product-icon">{product.icon}</div>
                <h3>{product.name}</h3>
              </div>
              <p className="product-description">{product.description}</p>
            </div>
          ))}
        </div>
        {openProductDialog && renderProductForm()}
      </div>
    );
  };

  // Services content (placeholder)
  const renderServicesContent = () => {
    return (
      <div className="placeholder-section">
        <h2>Services Management</h2>
        <p>Services management interface will be available soon.</p>
      </div>
    );
  };

  // Render the create enterprise form
  const renderForm = () => {
    return (
      <div className="modal">
        <div className="modal-content">
          <button className="dialog-close" onClick={() => setOpenDialog(false)}>Ã—</button>
          <div className="admin-form">
            <h2>Create New Enterprise</h2>
            <form onSubmit={handleCreateAdmin}>
              <div className="form-section">
                <h3>Account Details</h3>
          <div className="form-group">
            <label>Email</label>
            <input 
              type="email" 
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
              required 
            />
                  {formErrors.email && <div className="error-message">{formErrors.email}</div>}
          </div>

          <div className="form-group">
                  <label>Password</label>
            <input 
              type="password" 
                    value={formData.password}
                    onChange={(e) => setFormData({...formData, password: e.target.value})}
                    required
                  />
                  {formErrors.password && <div className="error-message">{formErrors.password}</div>}
          </div>
              </div>

              <div className="form-section">
                <h3>Enterprise Information</h3>
          <div className="form-group">
                  <label>Company Name</label>
            <input 
              type="text" 
                    value={formData.profile.companyName || ''}
                    onChange={handleCompanyNameChange}
                    required
            />
          </div>

          <div className="form-group">
                  <label>Subdomain</label>
                  <div className="subdomain-input-container">
            <input 
              type="text" 
                      value={formData.subdomain || ''}
                      onChange={(e) => setFormData({...formData, subdomain: e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '')})}
                      placeholder="yourcompany"
            />
                    <span className="subdomain-suffix">.yourdomain.com</span>
          </div>
                  <small>Only lowercase letters, numbers, and hyphens allowed</small>
                </div>

          <div className="form-group">
                  <label>Admin Name</label>
            <input 
              type="text" 
                    value={formData.profile.fullName || ''}
                    onChange={(e) => setFormData({...formData, profile: {...formData.profile, fullName: e.target.value}})}
                    required
            />
          </div>

          <div className="form-group">
                  <label>Phone</label>
            <input 
                    type="text"
                    value={formData.profile.phone || ''}
                    onChange={(e) => setFormData({...formData, profile: {...formData.profile, phone: e.target.value}})}
            />
          </div>
              </div>

              <div className="form-section">
                <h3>Access Control</h3>
                <div className="form-group">
                  <div className="checkbox-label">
              <input 
                type="checkbox" 
                      checked={formData.permissions.crmAccess || false}
                      onChange={(e) => setFormData({
                        ...formData,
                        permissions: {
                          ...formData.permissions,
                          crmAccess: e.target.checked
                        }
                      })}
              />
              Grant CRM Access
          </div>
                </div>
              </div>

          <div className="form-actions">
                <button type="button" className="cancel-btn" onClick={() => {
              setOpenDialog(false);
              resetForm();
            }}>
              Cancel
            </button>
                <button type="submit" className="submit-btn">Create</button>
          </div>
        </form>
          </div>
        </div>
      </div>
    );
  };

  // Enterprise content
  const renderEnterpriseContent = () => {
    return (
      <div className="enterprises-section">
        <div className="section-header">
          <h2>Enterprise Management</h2>
          <button className="create-btn" onClick={() => setOpenDialog(true)}>
            Create New Enterprise
          </button>
        </div>
        <div className="enterprises-grid">
          {admins.length > 0 ? (
            admins.map(admin => (
              <div key={admin.id} className="enterprise-card">
                <div className="enterprise-header">
                  <h3>{admin.profile?.companyName || 'Enterprise'}</h3>
                </div>
                <div className="enterprise-info">
                  <p><strong>Admin:</strong> {admin.profile?.fullName || admin.email}</p>
                  <p><strong>Email:</strong> {admin.email}</p>
                  <p><strong>Status:</strong> {admin.profile?.status || 'Active'}</p>
                </div>
                <div className="enterprise-access">
                  <h4>Access</h4>
                  <div className="access-badges">
                    <span className={`access-badge ${admin.permissions?.crmAccess ? 'granted' : 'denied'}`}>
                      CRM
                    </span>
                  </div>
                </div>
                <div className="enterprise-actions">
                  <button 
                    className={`access-toggle-btn ${admin.permissions?.crmAccess ? 'revoke' : 'grant'}`}
                    onClick={() => handleToggleCrmAccess(admin.id, admin.permissions?.crmAccess)}
                  >
                    {admin.permissions?.crmAccess ? 'Revoke CRM' : 'Grant CRM'}
                  </button>
                  <button className="edit-btn" onClick={() => handleEditClick(admin)}>
                    Edit
                  </button>
                  <button className="delete-btn" onClick={() => handleDeleteEnterprise(admin.id)}>
                    Delete
                  </button>
                </div>
              </div>
            ))
          ) : (
            <div className="no-data-container">
              <p>No enterprises found. Create your first enterprise.</p>
            </div>
          )}
        </div>
        {openDialog && renderForm()}
        {openEditDialog && renderEditForm()}
      </div>
    );
  };

  // Quotations content (placeholder)
  const renderQuotationsContent = () => {
    return (
      <div className="placeholder-section">
        <h2>Quotations Management</h2>
        <p>Quotations management interface will be available soon.</p>
      </div>
    );
  };

  // Invoices content (placeholder)
  const renderInvoicesContent = () => {
    return (
      <div className="placeholder-section">
        <h2>Invoices Management</h2>
        <p>Invoices management interface will be available soon.</p>
      </div>
    );
  };

  // Reports content (placeholder)
  const renderReportsContent = () => {
    return (
      <div className="placeholder-section">
        <h2>Reports</h2>
        <p>Reports interface will be available soon.</p>
      </div>
    );
  };

  // Expenses content (placeholder)
  const renderExpensesContent = () => {
    return (
      <div className="placeholder-section">
        <h2>Expenses Management</h2>
        <p>Expenses management interface will be available soon.</p>
      </div>
    );
  };

  // Receipts content (placeholder)
  const renderReceiptsContent = () => {
    return (
      <div className="placeholder-section">
        <h2>Receipts Management</h2>
        <p>Receipts management interface will be available soon.</p>
      </div>
    );
  };

  // Complaints content (placeholder)
  const renderComplaintsContent = () => {
    return (
      <div className="placeholder-section">
        <h2>Complaints Management</h2>
        <p>Complaints management interface will be available soon.</p>
      </div>
    );
  };

  // Render the product form
  const renderProductForm = () => {
    return (
      <>
        <h2>Add New Product</h2>
        <form onSubmit={handleAddProduct}>
          <div className="form-group">
            <label>Product ID</label>
            <input 
              type="text" 
              value={newProduct.id} 
              onChange={(e) => setNewProduct({...newProduct, id: e.target.value})} 
              required 
            />
          </div>
          <div className="form-group">
            <label>Product Name</label>
            <input 
              type="text" 
              value={newProduct.name} 
              onChange={(e) => setNewProduct({...newProduct, name: e.target.value})} 
              required 
            />
          </div>
          <div className="form-group">
            <label>Description</label>
            <textarea 
              value={newProduct.description} 
              onChange={(e) => setNewProduct({...newProduct, description: e.target.value})} 
              required 
            />
          </div>
          <div className="form-group">
            <label>Icon (Emoji)</label>
            <input 
              type="text" 
              value={newProduct.icon} 
              onChange={(e) => setNewProduct({...newProduct, icon: e.target.value})} 
              required 
            />
          </div>
          <div className="form-actions">
            <button type="button" onClick={() => {
              setOpenProductDialog(false);
              resetProductForm();
            }}>
              Cancel
            </button>
            <button type="submit">Add Product</button>
          </div>
        </form>
      </>
    );
  };

  // Add function to generate subdomain from company name
  const generateSubdomain = (companyName) => {
    if (!companyName) return '';
    
    return companyName
      .toLowerCase()
      .replace(/[^a-z0-9]/g, '-') // Replace non-alphanumeric with hyphens
      .replace(/-+/g, '-')         // Replace multiple hyphens with single hyphen
      .replace(/^-|-$/g, '')       // Remove hyphens from start and end
      .substring(0, 30);           // Limit length
  };

  // Add function to update company name and generate subdomain
  const handleCompanyNameChange = (e) => {
    const companyName = e.target.value;
    let subdomain = formData.subdomain;
    
    // If subdomain is empty or was auto-generated, update it
    if (!formData.subdomain || formData.subdomain === generateSubdomain(formData.profile.companyName)) {
      subdomain = generateSubdomain(companyName);
    }
    
    setFormData({
      ...formData,
      subdomain,
      profile: {
        ...formData.profile,
        companyName
      }
    });
  };

  // Add an edit form renderer
  const renderEditForm = () => {
  return (
      <>
        <h2>Edit Enterprise</h2>
        <form onSubmit={handleUpdateEnterprise}>
          <div className="form-group">
            <label>Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          
          <div className="form-group">
            <label>Password (Leave blank to keep current)</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          
          <div className="form-group">
            <label>Full Name</label>
            <input
              type="text"
              value={profile.fullName || ''}
              onChange={(e) => setProfile({...profile, fullName: e.target.value})}
            />
          </div>
          
          <div className="form-group">
            <label>Phone</label>
            <input
              type="text"
              value={profile.phone || ''}
              onChange={(e) => setProfile({...profile, phone: e.target.value})}
            />
            </div>
          
          <div className="form-group">
            <label>Department</label>
            <input
              type="text"
              value={profile.department || ''}
              onChange={(e) => setProfile({...profile, department: e.target.value})}
            />
              </div>

          <div className="form-group">
            <label>Join Date</label>
            <input
              type="date"
              value={profile.joinDate || new Date().toISOString().split('T')[0]}
              onChange={(e) => setProfile({...profile, joinDate: e.target.value})}
            />
                </div>
          
          <div className="form-group checkbox-group">
            <label>
              <input
                type="checkbox"
                checked={permissions.crmAccess || false}
                onChange={(e) => setPermissions({...permissions, crmAccess: e.target.checked})}
              />
              Grant CRM Access
            </label>
                  </div>
          
          <div className="form-actions">
            <button type="button" onClick={() => {
              setOpenEditDialog(false);
              resetForm();
            }}>
              Cancel
                </button>
            <button type="submit">Update</button>
              </div>
        </form>
      </>
    );
  };

  // Main render
  return (
    <div className="dashboard-layout">
      {/* Sidebar Navigation */}
      <SuperAdminSidebar activeItem={activeTab} onNavigate={handleSidebarNavigation} />

      {/* Main Content Area */}
      <div className="dashboard-main">
        {/* Header */}
        <div className="dashboard-header">
          <div className="user-welcome">
            <h3>Welcome, Super Admin</h3>
                      </div>
          <div className="header-right">
            <ThemeToggle />
                      <button 
              className="logout-btn-small" 
                        onClick={() => {
                localStorage.removeItem('token');
                navigate('/superadmin/login');
                        }}
                      >
              Logout
                      </button>
                    </div>
                  </div>

        {/* Content Area */}
        <div className="dashboard-content">
          {renderMainContent()}
        </div>
      </div>

      {/* Alert Message */}
      {alert.show && (
        <div className={`alert alert-${alert.type}`}>
          {alert.message}
          <button className="close-btn" onClick={() => setAlert({...alert, show: false})}>Ã—</button>
        </div>
      )}
    </div>
  );
};

export default SuperAdminDashboard;
